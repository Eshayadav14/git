Overview

Component Name: carousel-splide
Description:
The carousel-splide component is a dynamic carousel wrapper that integrates multiple static components—most notably category-tile-carousel and article-list-carousel. It supports various layout variations and is fully responsive with behavior tailored for different screen sizes. The component is built on the Splide.js carousel framework and supports interactions like buttons, steppers, and responsive transitions.

Nature of the Component: Dynamic Wrapper Component (renders static components based on JSON configuration)

⸻

How the Component Works

Functionality:
	•	Dynamically renders either the category-tile-carousel or article-list-carousel based on JSON flags.
	•	Supports four layout variations:
	1.	Basic
	2.	Small Content
	3.	Large Content
	4.	Large Content + Text
	•	Includes features like carousel navigation buttons, steppers, and responsive layout adjustments based on screen size.
	•	Incorporates accessibility and ADA best practices.

Major Elements:
	•	Header Section: Title (heading) and optional “View All” link (href and linkText).
	•	Intro Image Variations (Optional):
	•	ImageSmall (for Small Content)
	•	ImageLarge (for Large or Large + Text Content)
	•	ImageText (for Large + Text Content)
	•	Dynamic Body Section:
	•	Category Tile Carousel: Triggered via categoryTilesCarousel: true
	•	Article List Carousel: Triggered via articleListCarousel: true

⸻

Integration Requirements with AEM

Integration Prerequisites:
	•	AEM authors content and passes data as structured JSON.
	•	Data should define which carousel variation and child component to use.

Integration Process:
	•	Data Configuration:
JSON keys required for each carousel list:
	•	Mapping Data:
The properties in JSON are mapped directly to conditional logic within the carousel-splide.hbs file, and the respective static component is invoked ({{> category-tile-carousel}} or {{> article-list-carousel}}).

⸻

API Integration & Endpoints

No APIs are directly consumed in this wrapper component. All content is AEM-authored and rendered statically.

⸻

Component Variations & Visual References

Layout Variations Supported:
	1.	Basic: All tiles are equal-sized.
	2.	Small Content: First tile slightly larger than the rest.
	3.	Large Content: First tile significantly larger.
	4.	Large Content + Text: First tile has image and text content block.

Responsive Behavior by Breakpoint:
table form:
Breakpoint
Carousel Buttons
Steppers
Title Stroke
Layout Behavior
XXL/XL/L/M
Visible
Visible
Visible
Per Figma
S/XS
Hidden
Visible
Hidden
Stacked Layout

Major Functions & Behavior
	•	Dynamic Rendering: Chooses between article tiles and category tiles dynamically.
	•	Interactive Navigation: Carousel scrolls via buttons, swipes, or steppers.
	•	Accessibility: ARIA tags and keyboard navigation in line with ADA best practices.
	•	Mobile-Optimized: Adjusts layout and visibility for smaller devices.
	•	State Handling: Buttons get disabled when end of carousel is reached. Steppers show active/inactive status per scroll position.

⸻

Resources & Related Files

Linked Files:
	•	carousel-splide.hbs
Path: src\dgweb\ui.frontend\src\app\components\carousel-splide\carousel-splide.hbs
	•	carousel-splide.json
Path: src\dgweb\ui.frontend\src\app\components\carousel-splide\carousel-splide.json
	•	carousel-splide.scss
Path: src\dgweb\ui.frontend\src\app\components\carousel-splide\carousel-splide.scss
	•	carousel-splide.ts
Path: src\dgweb\ui.frontend\src\app\components\carousel-splide\carousel-splide.ts

⸻

JIRA Story References
	•	Article Tile Integration: DSE-14461
	•	Category Tile Integration: DSE-14007

⸻

Customization & Theming
	•	Controlled via SCSS modifiers and Figma-guided layout classes (small-content, large-content, large-content-text)
	•	Background colors, stroke visibility, and element stacking are conditional via screen size media queries.

⸻

Dependencies
	•	Splide.js – Carousel library powering the scroll, buttons, and stepper logic.
	•	Handlebars Partials – category-tile-carousel and article-list-carousel
	•	ADA Compliance – Component adheres to ADA Best Practices as defined in internal guidelines.
	•	Custom Utilities – If any event tracking or analytics are needed, they can be wired through utility functions inside carousel-splide.ts.




