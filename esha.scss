 const handleSaveClick = async (updatedAddress: Address) => {
    // Update our local address list state immediately
    setAddressData((prevAddressData) =>
      prevAddressData?.map((address) =>
        address.ShippingZip === updatedAddress.ShippingZip
          ? updatedAddress
          : { ...address, IsDefaultShippingAddress: false }
      )
    );

    // Determine if address fields (not just name) have changed.
    // Adjust these conditions as needed.
    const isAddressChanged =
      updatedAddress.ShippingAddressLine1 !== selectedAddress?.ShippingAddressLine1 ||
      updatedAddress.ShippingCity !== selectedAddress?.ShippingCity ||
      updatedAddress.ShippingState !== selectedAddress?.ShippingState ||
      updatedAddress.ShippingZip !== selectedAddress?.ShippingZip;

    let resolvedResult;
    try {
      if (selectedAddress?.Id) {
        resolvedResult = await dispatch(
          getResolvedAddressAction({
            address: { ...updatedAddress, Id: selectedAddress.Id },
            isAuthenticated: user,
          })
        ).unwrap();
      } else {
        resolvedResult = await dispatch(
          getResolvedAddressAction({
            address: updatedAddress,
            isAuthenticated: user,
          })
        ).unwrap();
      }
    } catch (error) {
      // Handle error if needed.
      return;
    }

    // If the address fields have changed, trigger a modal.
    if (isAddressChanged) {
      setEnteredAddress(updatedAddress);
      // Here we decide which modal to show based on the resolution result.
      // If the response contains a ResolvedAddress, show the suggested modal.
      // Otherwise, show the verify modal.
      if (resolvedResult && resolvedResult.ResolvedAddress) {
        setShowSuggestedModal(true);
      } else {
        setShowVerifyModal(true);
      }
    } else {
      // Simple update (like only a name change): go back to the address list.
      setSelectedAddress(null);
    }
  };

  const 