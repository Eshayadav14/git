editForm.tsx: 
interface EditFormProps {
  myaddressdata?: string;
  address?: Address;
  onBackClick: () => void;
  onSaveClick: (address: Address) => void;
  onDeleteClick: () => void;
  hideDeleteButton?: boolean;
  editFormNavSource?: string
}
const EditForm: React.FC<EditFormProps> = (props) => {
  const {setAsDefault, defaultAddress, deleteButton, myAddress} = window.DG?.aemData?.labels?.myAddress || {};
  const handleSaveClick = (updatedAddress: Address) => {
    const changedAddress = {
      DeliveryInstructions: updatedAddress.IsDefaultShippingAddress,
      ShippingAddressLine1: updatedAddress.ShippingAddressLine1,
      ShippingAddressLine2: updatedAddress?.ShippingAddressLine2 || "",
      ShippingCity: updatedAddress.ShippingCity,
      ShippingCountry: updatedAddress?.ShippingCountry || "US",
      ShippingFirstName: updatedAddress?.ShippingFirstName,
      ShippingLastName: updatedAddress?.ShippingLastName || "",
      ShippingState: updatedAddress.ShippingState,
      ShippingZip: updatedAddress?.ShippingZip,
    };
    onSaveClick({ ...changedAddress, IsDefaultShippingAddress });
  };

  return (
    <div className="my-address-edit-form">
      {address?.IsDefaultShippingAddress ? (
        <h2 className="my-address-edit-form__title">{"defaultAddress"}</h2>
      ) : (
        <div className="my-address-edit-form__default-checkbox">
          <input
            type="checkbox"
            checked={IsDefaultShippingAddress}
            onChange={() => setIsDefault(!IsDefaultShippingAddress)}
          />
          <span className="my-address-edit-form__default">
            {"setAsDefault"}
          </span>
        </div>
      )}
      {/* AddressForm Component */}
      <AddressForm
        onSubmit={(updatedAddress) =>
          handleSaveClick({ ...address, ...updatedAddress })
        }
        selectedAddress={address}
        editFormNavSource={editFormNavSource}
      />
  );
};

export default EditForm;

addressForm.tsx:

  const [isTouched, setIsTouched] = useState(false);

  // Validate fields on change
  const handleShippingFirstNameChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    setShippingFirstName(e.target.value);
    setIsTouched(true);
    setShippingFirstNameError(
      e.target.value.length <= 1
        ? yellowButton || isshippingcart
          ? myAddress?.firstNameRequired
          : myAddress?.invalidFirstName
        : ""
    );
    if(!updatebutton && editFormNavSource === "edit"){
      setUpdatebutton(true);
    }
  };

  const handleShippingLastNameChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    setShippingLastName(e.target.value);
    setIsTouched(true);
    setShippingLastNameError(
      e.target.value.length <= 1
        ? yellowButton ||  isshippingcart
          ? myAddress?.LastNameRequired
          : myAddress?.invalidLastName
        : ""
    );
    if(!updatebutton && editFormNavSource === "edit"){
      setUpdatebutton(true);
    }
  };

  return (
    <div
      className={classNames(
        `my-address-form ${customClass ? customClass : ""}`
      )

        ......
        <button
          type="submit"
          className={classNames("my-address-form__submit-btn", {
            "yellow-button": yellowButton && !formerror,
            "gray-button": formerror || !isTouched,
            "d-none": !storeData.checkout.user && isshippingcart,
          })}
          onClick={(e) => validateForm(e)}
        >
          {editFormNavSource === "save" || !updatebutton ? "save" : "update address"}
        </button>
      </form>
    </div>
  );
};

export default AddressForm;


myadress.tsx:


  return (
    <div className={classNames(`my-address ${customClass ? customClass : ""}`)}>
      <div className="my-address__header__title">
        {isshippingcart ? (
          <>
          <p className="shippingcheckouthead">{SHIPPING_CHECKOUT.ADD_NEW_ADDRESS}</p>
          <p className="shippingcheckouttitle">
            {SHIPPING_CHECKOUT.FORM_INSTRUCTION}
          </p>
          </>
        ) : null}
        {userShippingAddresses?.length === 0 && (
          <>
            <div className="my-address__header__title">
              {AddressData?.length > 0 ? "" : emptyAddressesTitle }
            </div>
            <div className="my-address__header__subtitle">
              {AddressData?.length > 0 ? "" : emptyAddressesSubtitle}
            </div>
          </>
        )}
      </div>

      {isshippingcart && showaddressmodal ? (
        <AddressForm
          customClass={customClass}
          isshippingcart={isshippingcart}
          onSubmit={handleAddressSubmit}
          checkoutShipping={true}
        />
      ) : selectedAddress ? (
        <EditForm
          myaddressdata={JSON.stringify(AddressTexts)}
          address={selectedAddress}
          editFormNavSource={editFormNavSource}
          onBackClick={() => setSelectedAddress(null)}
          onSaveClick={handleSaveClick}
          onDeleteClick={() => handleDeleteClick(selectedAddress)}
          hideDeleteButton={hideDeleteButton}
        />
      ) : userShippingAddresses?.length > 0 && !isshippingcart ? (
        <>
          <div className="address__container">
            {userShippingAddresses.map((address) => (
              <AddressListComponent
                key={address.Id}
                address={address}
                onEditClick={() => handleEditClick(address)}
              />
            ))}
          </div>
          <button
            className="add-address-button"
            onClick={handleAddAddressClick}
          >
            {"Add an address"}
          </button>
        </>
      ) : (
        <AddressForm
          customClass={customClass}
          isshippingcart={isshippingcart}
          onSubmit={handleAddressSubmit}
        />
      )}

      {showVerifyModal && (
        <VerifyAddressModalComponent
          onClose={() => setShowVerifyModal(false)}
          onCustomButtonClick={() => setShowVerifyModal(false)}
          address={formatVerifyAddress(enteredAddress)} 
        />
      )}

      {showSuggestedModal && enteredAddress && shippingsuggestedadd && (
        <SuggestedAddressModalComponent
          suggestedAddress={shippingsuggestedadd}
          enteredAddress={enteredAddress}
          onClose={() => setShowSuggestedModal(false)}
          onConfirm={handleConfirmAddress}
        />
      )}

      {showConnectModalOpen && (
        <ReplaceAddressModal
          onClose={closeConnectModal}
          onOpenModal={handleReplaceAddress}
          addressList={
            AddressData.length > 0 ? AddressData : userShippingAddresses
          }
        />
      )}
    </div>
  );
};

export default MyAddress;

const CustomMyAddress = createCustomElement(
  (props: any) => (
    <ReduxProvider>
      <MyAddress {...props}></MyAddress>
    </ReduxProvider>
  ),
  MyAddressModel,
  "element"
);

customElements.define("custom-my-address", CustomMyAddress);


so here what I need to do is that I have a checkbox in editForm, so when I select on it then I need to set the setIsTouched(true) so that the functionality works the way it is working in address Form component. both the edit form and address form components are called in my-address component. Please tell me how I can achieve this functionality
