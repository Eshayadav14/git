Fulfillment Picker: 

import { getHasValidGigyaAccountData } from "../../utilities/gigyaProfile";
import { setProfileInfo } from "../../slices/gigyaProfileSlice";
import { setAccountInfo } from "../../utilities/gigyaAccountInfo";

const gigyaAccountData = useTypedSelector((state) => state.gigyaProfile);
useEffect(() => {
    const gigyaCartType = gigyaAccountData?.gigyaProfile?.data?.preferences?.cartType;
      if(isSignedIn && gigyaCartType){
        switch (gigyaCartType) {
          case DELIVERY:
            setSelectedTile(DELIVERY);
            localStorage.setItem("order-type", DELIVERY)
            break;
          case SHIPPING:
            setSelectedTile(SHIPPING);
            localStorage.setItem("order-type", SHIPPING)
            break;
          default:
            setSelectedTile(TILE_TYPE.IN_STORE);
            localStorage.setItem("order-type", TILE_TYPE.IN_STORE)
            break;
        }
      }
  }, [gigyaAccountData]);

 useEffect(() => {
    window.gigya &&
      window.gigya.accounts &&
      window.gigya.accounts.getAccountInfo({
        include: 'profile,data,loginIDs',
        extraProfileFields: 'phones',
        callback: (response: any) => {
          if (getHasValidGigyaAccountData(response)) {
            dispatch(setProfileInfo(response));
          }
        },
      });
  }, [dispatch]);

API Response: 
{
  "callId": "4c4ffd08cc814329895e219dfc41e622",
  "data": {
    "preferences": {
      "POSreceipt": {
        "flag": "none",
        "optIn": "false",
        "SMS": "no",
        "email": "no"
      },
      "preferredStore": "9800",
      "emailMarketing": "0",
      "cartType": "delivery",
      "myDG": {
        "acceptanceDate": "3/18/2025",
        "isShowWelcomeScreen": false,
        "acceptedVersion": "16",
        "source": "DGWeb",
        "isMyDG": true
      },
  "profile": {
    "firstName": "Prabjot",
    "lastName": "Singh",
    "email": "prabjsingh@deloitte.com"
  },
}
    
  Address Form :

  useEffect(() => {
    setUser(storeData.checkout.user);
  }, [storeData.checkout.user]);

  useEffect(() => {
    if (editFormNavSource) {
      setShippingFirstName(
        selectedAddress?.ShippingFirstName
          ? selectedAddress.ShippingFirstName
          : ""
      );
      setShippingLastName(
        selectedAddress?.ShippingLastName
          ? selectedAddress.ShippingLastName
          : ""
      );
    }
    if (editFormNavSource === "edit") {
      setShippingAddressLine1(
        selectedAddress?.ShippingAddressLine1
          ? selectedAddress.ShippingAddressLine1
          : ""
      );
      setShippingAddressLine2(
        selectedAddress?.ShippingAddressLine2
          ? selectedAddress.ShippingAddressLine2
          : ""
      );
      setShippingZip(
        selectedAddress?.ShippingZip ? selectedAddress.ShippingZip : ""
      );
      setShippingCity(
        selectedAddress?.ShippingCity ? selectedAddress.ShippingCity : ""
      );
      setShippingState(
        selectedAddress?.ShippingState ? selectedAddress.ShippingState : ""
      );
      setIsDefaultShippingAddress(
        selectedAddress?.IsDefaultShippingAddress
          ? selectedAddress.IsDefaultShippingAddress
          : false
      );
    }
  }, [editFormNavSource]);

  useEffect(() => {
    if (editFormNavSource === "edit") {
      setUpdatebutton(false);
    } else {
      setUpdatebutton(false);
    }
  },[editFormNavSource]);

  useEffect(() => {
    // Check if any error state is not empty
    if (
      ShippingFirstNameError ||
      ShippingLastNameError ||
      ShippingAddressLine1Error ||
      ShippingaddressLine2Error ||
      ShippingZipError ||
      ShippingCityError ||
      ShippingFirstName === "" ||
      ShippingLastName === "" ||
      ShippingAddressLine1 === "" ||
      ShippingZip === "" ||
      ShippingCity === "" ||
      ShippingState === ""
    ) {
      SetFormerror(true);
    } else {
      SetFormerror(false);
    }
  }, [
    ShippingFirstNameError,
    ShippingLastNameError,
    ShippingAddressLine1Error,
    ShippingaddressLine2Error,
    ShippingZipError,
    ShippingCityError,
    ShippingFirstName,
    ShippingLastName,
    ShippingAddressLine1,
    ShippingAddressLine2,
    ShippingZip,
    ShippingCity,
    ShippingState,
  ]);

  useEffect(() => {
    dispatch(updateformenablebutton(formerror));
  }, [formerror]);

  useEffect(() => {
    const result = storeData.checkout.executehandlesubmit;
    setExecuteguestsubmit(result);
  }, [storeData.checkout.executehandlesubmit]);

  // Validate fields on change
  const handleShippingFirstNameChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    setShippingFirstName(e.target.value);
    setIsTouched(true);
    setShippingFirstNameError(
      e.target.value.length <= 1
        ? yellowButton || isshippingcart
          ? myAddress?.firstNameRequired
          : myAddress?.invalidFirstName
        : ""
    );
    if(!updatebutton && editFormNavSource === "edit"){
      setUpdatebutton(true);
    }
  };

  const handleShippingLastNameChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    setShippingLastName(e.target.value);
    setIsTouched(true);
    setShippingLastNameError(
      e.target.value.length <= 1
        ? yellowButton ||  isshippingcart
          ? myAddress?.LastNameRequired
          : myAddress?.invalidLastName
        : ""
    );
    if(!updatebutton && editFormNavSource === "edit"){
      setUpdatebutton(true);
    }
  };

  const handleShippingAddressLine1Change = (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    setShippingAddressLine1(e.target.value);
    setIsTouched(true);

    if (poBoxRegex.test(e.target.value)) {
      setShippingAddressLine1Error(
        myAddress?.poBoxInvalidAddress ||
          ADDRESS_FORM_LABELS.WHERE_TO_MODAL_TEXT.PO_BOX_TEXT
      );
    } else {
      setShippingAddressLine1Error(
        e.target.value.length <= 1
          ? yellowButton || isshippingcart
            ? myAddress?.address1Required
            : myAddress?.invalidAddress1
          : ""
      );
    }
    if (!updatebutton && editFormNavSource === "edit") {
      setUpdatebutton(true);
    }
  };

  const handleShippingAddressLine2Change = (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    setShippingAddressLine2(e.target.value);
    setIsTouched(true);
    setShippingAddressLine2Error(
      e.target.value.length <= 1
        ? yellowButton ||  isshippingcart
          ? myAddress?.Address2Required
          : myAddress?.invalidAddress2
        : ""
    );
    if(!updatebutton && editFormNavSource === "edit"){
      setUpdatebutton(true);
    }
  };

  const handleShippingZipChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setShippingZip(e.target.value);
    setIsTouched(true);
    if (!zipPattern.test(value)) {
      setShippingZipError(
        yellowButton ||  isshippingcart
          ? myAddress?.zipCodeRequired
          : myAddress?.invalidZipCode
      );
    } else {
      setShippingZipError("");
    }
    if(!updatebutton && editFormNavSource === "edit"){
      setUpdatebutton(true);
    }
  };

  const handleShippingCityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setShippingCity(e.target.value);
    setIsTouched(true);
    setShippingCityError(
      e.target.value.length <= 1
        ? yellowButton ||  isshippingcart
          ? myAddress?.cityRequired
          : myAddress?.invalidCity
        : ""
    );
    if(!updatebutton && editFormNavSource === "edit"){
      setUpdatebutton(true);
    }
  };

  const handleShippingStateChange = (
    e: React.ChangeEvent<HTMLSelectElement>
  ) => {
    setShippingState(e.target.value);
    setIsTouched(true);
    setShippingStateError(
      e.target.value.length <= 1
        ? yellowButton ||  isshippingcart
          ? myAddress?.stateRequired
          : myAddress?.invalidState
        : ""
    );
    if(!updatebutton && editFormNavSource === "edit"){
      setUpdatebutton(true);
    }
  };

  const validateForm = (e: React.FormEvent<Element>) => {
    setShippingFirstNameError(
      ShippingFirstName.length <= 1
        ? yellowButton ||  isshippingcart
          ? myAddress?.firstNameRequired
          : myAddress?.invalidFirstName
        : ""
    );
    setShippingLastNameError(
      ShippingLastName.length <= 1
        ? yellowButton ||  isshippingcart
          ? myAddress?.LastNameRequired
          : myAddress?.invalidLastName
        : ""
    );

    if (poBoxRegex.test(ShippingAddressLine1)) {
      setShippingAddressLine1Error(
        myAddress?.poBoxInvalidAddress ||
          ADDRESS_FORM_LABELS.WHERE_TO_MODAL_TEXT.PO_BOX_TEXT
      );
      e.preventDefault();
      return;
    } else {
      setShippingAddressLine1Error(
        ShippingAddressLine1.length <= 1
        ? yellowButton ||  isshippingcart
            ? myAddress?.address1Required
            : myAddress?.invalidAddress1
          : ""
      );
    }
    setShippingZipError(
      !zipPattern.test(ShippingZip)
        ? yellowButton ||  isshippingcart
          ? myAddress?.zipCodeRequired
          : myAddress?.invalidZipCode
        : ""
    );
    setShippingCityError(
      ShippingCity.length <= 1
        ? yellowButton ||  isshippingcart
          ? myAddress?.cityRequired
          : myAddress?.invalidCity
        : ""
    );
    setShippingStateError(
      ShippingState.length <= 1
        ? yellowButton ||  isshippingcart
          ? myAddress?.stateRequired
          : myAddress?.invalidState
        : ""
    );
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    validateForm(e);

    // Check if there are any errors before submitting
    if (
      ShippingFirstName.length <= 1 ||
      ShippingLastName.length <= 1 ||
      ShippingAddressLine1.length <= 1 ||
      !zipPattern.test(ShippingZip) ||
      ShippingCity.length <= 1 ||
      ShippingState.length <= 1
    ) {
      return;
    }

    const submitData = {
      ShippingFirstName,
      ShippingLastName,
      ShippingAddressLine1,
      ShippingAddressLine2,
      ShippingZip,
      ShippingCity,
      ShippingState,
      IsDefaultShippingAddress,
      DeliveryInstructions,
      ShippingCountry: "US",

    };

export default AddressForm;

    SO here what I need is that just the way I'm getting data from API response from gigya in fulfilment Picker, I need the first name and last name in address Form prepopulated from gigya if it is present, otherwise it should be empty just way it is. 

    


